version: '3.8'

services:
  # MySQL Database
  database:
    image: mysql:8.0
    container_name: trading_journal_db
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_NAME:-trading_journal}
      MYSQL_USER: ${DB_USER:-trading_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-trading_password}
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./backend/sql/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - trading_journal_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: trading_journal_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trading_journal_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: trading_journal_backend
    environment:
      - NODE_ENV=production
      - DB_HOST=database
      - DB_NAME=${DB_NAME:-trading_journal}
      - DB_USER=${DB_USER:-trading_user}
      - DB_PASSWORD=${DB_PASSWORD:-trading_password}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-here}
      - REDIS_URL=redis://redis:6379
    ports:
      - "5000:5000"
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - trading_journal_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: trading_journal_frontend
    environment:
      - NUXT_PUBLIC_API_BASE_URL=http://backend:5000/api
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - trading_journal_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: trading_journal_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - logs_data:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - trading_journal_network
    restart: unless-stopped

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local

networks:
  trading_journal_network:
    driver: bridge